package me.josephsf.jobportaljosephsfeir.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import java.time.LocalDateTime;

/**
 * Data Transfer Object (DTO) for job applications in the Job Portal system.
 * <p>
 * This class represents the data structure used for transferring job application
 * information between the client and server. It contains all relevant fields for
 * creating and updating job applications, including required fields like jobId and
 * candidateId, as well as optional fields like cover letter and resume URL.
 * </p>
 * <p>
 * The class includes validation annotations to ensure data integrity:
 * </p>
 * <ul>
 *   <li>{@code @NotBlank} annotations enforce required fields</li>
 *   <li>{@code @Size} annotations enforce character limits on text fields</li>
 * </ul>
 * <p>
 * Some fields like status, applicationDate, reviewDate, and various timestamps
 * are typically managed by the server but may be included in responses to the client.
 * </p>
 *
 * @author Joseph Sfeir
 * @version 1.0
 * @since 2025-05-14
 */
public class ApplicationDto {
    /**
     * The unique identifier for the job application.
     * This field is typically generated by the server and used in update operations.
     */
    private String id;

    /**
     * The identifier of the job being applied for.
     * This field is required for creating a new application.
     */
    @NotBlank(message = "Job ID is required")
    private String jobId;

    /**
     * The identifier of the candidate applying for the job.
     * This field is required for creating a new application.
     */
    @NotBlank(message = "Candidate ID is required")
    private String candidateId;

    /**
     * The current status of the application.
     * Common values include APPLIED, REVIEWING, SHORTLISTED, REJECTED, and ACCEPTED.
     * This field is typically managed by the server.
     */
    private String status;

    /**
     * The applicant's cover letter for the job application.
     * This field has a maximum size of 1000 characters.
     */
    @Size(max = 1000, message = "Cover letter must not exceed 1000 characters")
    private String coverLetter;

    /**
     * The URL pointing to the applicant's resume.
     * This field is optional but recommended for job applications.
     */
    private String resumeUrl;

    /**
     * The date and time when the application was submitted.
     * This field is typically set by the server upon creation.
     */
    private LocalDateTime applicationDate;

    /**
     * The date and time when the application was reviewed.
     * This field is updated by the server when a recruiter reviews the application.
     */
    private LocalDateTime reviewDate;

    /**
     * Notes provided by the recruiter during the application review.
     * This field is updated when a recruiter provides feedback on an application.
     */
    private String reviewNotes;

    /**
     * Notes about the interview process for this application.
     * This field is updated when interview details or feedback are added.
     */
    private String interviewNotes;

    /**
     * The date and time when the application record was created.
     * This field is set by the server upon creation.
     */
    private LocalDateTime createdAt;

    /**
     * The date and time when the application record was last updated.
     * This field is updated by the server whenever changes are made.
     */
    private LocalDateTime updatedAt;

    /**
     * Default constructor for creating an empty ApplicationDto instance.
     */
    public ApplicationDto() {}

    /**
     * Gets the application's unique identifier.
     *
     * @return The application ID
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the application's unique identifier.
     *
     * @param id The application ID
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the ID of the job being applied for.
     *
     * @return The job ID
     */
    public String getJobId() {
        return jobId;
    }

    /**
     * Sets the ID of the job being applied for.
     *
     * @param jobId The job ID
     */
    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    /**
     * Gets the ID of the candidate applying for the job.
     *
     * @return The candidate ID
     */
    public String getCandidateId() {
        return candidateId;
    }

    /**
     * Sets the ID of the candidate applying for the job.
     *
     * @param candidateId The candidate ID
     */
    public void setCandidateId(String candidateId) {
        this.candidateId = candidateId;
    }

    /**
     * Gets the current status of the application.
     *
     * @return The application status
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the application.
     *
     * @param status The application status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Gets the applicant's cover letter.
     *
     * @return The cover letter text
     */
    public String getCoverLetter() {
        return coverLetter;
    }

    /**
     * Sets the applicant's cover letter.
     *
     * @param coverLetter The cover letter text
     */
    public void setCoverLetter(String coverLetter) {
        this.coverLetter = coverLetter;
    }

    /**
     * Gets the URL to the applicant's resume.
     *
     * @return The resume URL
     */
    public String getResumeUrl() {
        return resumeUrl;
    }

    /**
     * Sets the URL to the applicant's resume.
     *
     * @param resumeUrl The resume URL
     */
    public void setResumeUrl(String resumeUrl) {
        this.resumeUrl = resumeUrl;
    }

    /**
     * Gets the date and time when the application was submitted.
     *
     * @return The application date
     */
    public LocalDateTime getApplicationDate() {
        return applicationDate;
    }

    /**
     * Sets the date and time when the application was submitted.
     *
     * @param applicationDate The application date
     */
    public void setApplicationDate(LocalDateTime applicationDate) {
        this.applicationDate = applicationDate;
    }

    /**
     * Gets the date and time when the application was reviewed.
     *
     * @return The review date
     */
    public LocalDateTime getReviewDate() {
        return reviewDate;
    }

    /**
     * Sets the date and time when the application was reviewed.
     *
     * @param reviewDate The review date
     */
    public void setReviewDate(LocalDateTime reviewDate) {
        this.reviewDate = reviewDate;
    }

    /**
     * Gets the recruiter's notes about the application review.
     *
     * @return The review notes
     */
    public String getReviewNotes() {
        return reviewNotes;
    }

    /**
     * Sets the recruiter's notes about the application review.
     *
     * @param reviewNotes The review notes
     */
    public void setReviewNotes(String reviewNotes) {
        this.reviewNotes = reviewNotes;
    }

    /**
     * Gets the notes about the interview process.
     *
     * @return The interview notes
     */
    public String getInterviewNotes() {
        return interviewNotes;
    }

    /**
     * Sets the notes about the interview process.
     *
     * @param interviewNotes The interview notes
     */
    public void setInterviewNotes(String interviewNotes) {
        this.interviewNotes = interviewNotes;
    }

    /**
     * Gets the creation timestamp of the application record.
     *
     * @return The creation timestamp
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the creation timestamp of the application record.
     *
     * @param createdAt The creation timestamp
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the last update timestamp of the application record.
     *
     * @return The last update timestamp
     */
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the last update timestamp of the application record.
     *
     * @param updatedAt The last update timestamp
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}