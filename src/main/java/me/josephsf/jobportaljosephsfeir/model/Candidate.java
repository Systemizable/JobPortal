package me.josephsf.jobportaljosephsfeir.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Model class representing a job candidate's profile in the Job Portal system.
 * <p>
 * The Candidate entity contains detailed professional information about users with
 * the CANDIDATE role. This includes personal details, professional background,
 * education, skills, and preferences relevant to job seeking. Each Candidate is
 * linked to a User entity through the userId field.
 * </p>
 *
 * <p>Candidate profiles are stored in the "candidates" collection in MongoDB.
 * Each document maintains a one-to-one relationship with a document in the users
 * collection.</p>
 *
 * <p>Candidate documents include:</p>
 * <ul>
 *   <li>Personal information (name, contact details, location)</li>
 *   <li>Professional background (current title, experience level, years of experience)</li>
 *   <li>Technical and soft skills</li>
 *   <li>Work experience history</li>
 *   <li>Educational background</li>
 *   <li>Job search preferences and availability</li>
 *   <li>Audit timestamps (createdAt, updatedAt)</li>
 * </ul>
 *
 * <p>This profile information is used for job matching, searching, and
 * for displaying candidate details to recruiters.</p>
 *
 * @author Joseph Sfeir
 * @version 1.0
 * @since 2025-05-15
 * @see User
 * @see Experience
 * @see Education
 */
@Document(collection = "candidates")
public class Candidate {
    /**
     * Unique identifier for the candidate profile.
     * Automatically generated by MongoDB.
     */
    @Id
    private String id;

    /**
     * Reference to the associated User document's ID.
     * Establishes a one-to-one relationship with the User entity.
     */
    private String userId;

    /**
     * Candidate's first name.
     */
    private String firstName;

    /**
     * Candidate's last name.
     */
    private String lastName;

    /**
     * Candidate's contact phone number.
     */
    private String phoneNumber;

    /**
     * Candidate's geographic location or preferred work location.
     */
    private String location;

    /**
     * Candidate's current job title or role.
     */
    private String currentTitle;

    /**
     * Candidate's experience level category.
     * Valid values: ENTRY, JUNIOR, MID, SENIOR, EXECUTIVE
     */
    private String experienceLevel;

    /**
     * Candidate's total professional experience in years.
     */
    private Integer yearsOfExperience;

    /**
     * List of candidate's technical and soft skills.
     */
    private List<String> skills;

    /**
     * Detailed work experience history.
     */
    private List<Experience> experience;

    /**
     * Candidate's educational background.
     */
    private List<Education> education;

    /**
     * URL link to the candidate's resume or CV.
     */
    private String resumeUrl;

    /**
     * Brief professional summary or bio of the candidate.
     */
    private String profileSummary;

    /**
     * URL to the candidate's LinkedIn profile.
     */
    private String linkedInUrl;

    /**
     * URL to the candidate's portfolio or personal website.
     */
    private String portfolioUrl;

    /**
     * Candidate's expected or desired salary.
     */
    private Double expectedSalary;

    /**
     * Flag indicating if the candidate is currently available for work.
     */
    private Boolean isAvailable;

    /**
     * Timestamp when the candidate profile was created.
     */
    private LocalDateTime createdAt;

    /**
     * Timestamp when the candidate profile was last updated.
     */
    private LocalDateTime updatedAt;

    /**
     * Default constructor.
     * Initializes creation and update timestamps to current time,
     * and sets the candidate as available by default.
     */
    public Candidate() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
        this.isAvailable = true;
    }

    /**
     * Gets the candidate profile's unique identifier.
     *
     * @return the candidate profile ID
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the candidate profile's unique identifier.
     *
     * @param id the candidate profile ID to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the ID of the user associated with this candidate profile.
     *
     * @return the user ID
     */
    public String getUserId() {
        return userId;
    }

    /**
     * Sets the ID of the user associated with this candidate profile.
     *
     * @param userId the user ID to set
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /**
     * Gets the candidate's first name.
     *
     * @return the first name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Sets the candidate's first name.
     *
     * @param firstName the first name to set
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Gets the candidate's last name.
     *
     * @return the last name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Sets the candidate's last name.
     *
     * @param lastName the last name to set
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * Gets the candidate's phone number.
     *
     * @return the phone number
     */
    public String getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * Sets the candidate's phone number.
     *
     * @param phoneNumber the phone number to set
     */
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    /**
     * Gets the candidate's location.
     *
     * @return the location
     */
    public String getLocation() {
        return location;
    }

    /**
     * Sets the candidate's location.
     *
     * @param location the location to set
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Gets the candidate's current job title.
     *
     * @return the current title
     */
    public String getCurrentTitle() {
        return currentTitle;
    }

    /**
     * Sets the candidate's current job title.
     *
     * @param currentTitle the current title to set
     */
    public void setCurrentTitle(String currentTitle) {
        this.currentTitle = currentTitle;
    }

    /**
     * Gets the candidate's experience level.
     *
     * @return the experience level
     */
    public String getExperienceLevel() {
        return experienceLevel;
    }

    /**
     * Sets the candidate's experience level.
     *
     * @param experienceLevel the experience level to set
     */
    public void setExperienceLevel(String experienceLevel) {
        this.experienceLevel = experienceLevel;
    }

    /**
     * Gets the candidate's total years of professional experience.
     *
     * @return the years of experience
     */
    public Integer getYearsOfExperience() {
        return yearsOfExperience;
    }

    /**
     * Sets the candidate's total years of professional experience.
     *
     * @param yearsOfExperience the years of experience to set
     */
    public void setYearsOfExperience(Integer yearsOfExperience) {
        this.yearsOfExperience = yearsOfExperience;
    }

    /**
     * Gets the list of candidate's skills.
     *
     * @return the list of skills
     */
    public List<String> getSkills() {
        return skills;
    }

    /**
     * Sets the list of candidate's skills.
     *
     * @param skills the list of skills to set
     */
    public void setSkills(List<String> skills) {
        this.skills = skills;
    }

    /**
     * Gets the candidate's work experience history.
     *
     * @return the list of work experiences
     */
    public List<Experience> getExperience() {
        return experience;
    }

    /**
     * Sets the candidate's work experience history.
     *
     * @param experience the list of work experiences to set
     */
    public void setExperience(List<Experience> experience) {
        this.experience = experience;
    }

    /**
     * Gets the candidate's educational background.
     *
     * @return the list of education records
     */
    public List<Education> getEducation() {
        return education;
    }

    /**
     * Sets the candidate's educational background.
     *
     * @param education the list of education records to set
     */
    public void setEducation(List<Education> education) {
        this.education = education;
    }

    /**
     * Gets the URL to the candidate's resume or CV.
     *
     * @return the resume URL
     */
    public String getResumeUrl() {
        return resumeUrl;
    }

    /**
     * Sets the URL to the candidate's resume or CV.
     *
     * @param resumeUrl the resume URL to set
     */
    public void setResumeUrl(String resumeUrl) {
        this.resumeUrl = resumeUrl;
    }

    /**
     * Gets the candidate's profile summary or bio.
     *
     * @return the profile summary
     */
    public String getProfileSummary() {
        return profileSummary;
    }

    /**
     * Sets the candidate's profile summary or bio.
     *
     * @param profileSummary the profile summary to set
     */
    public void setProfileSummary(String profileSummary) {
        this.profileSummary = profileSummary;
    }

    /**
     * Gets the URL to the candidate's LinkedIn profile.
     *
     * @return the LinkedIn URL
     */
    public String getLinkedInUrl() {
        return linkedInUrl;
    }

    /**
     * Sets the URL to the candidate's LinkedIn profile.
     *
     * @param linkedInUrl the LinkedIn URL to set
     */
    public void setLinkedInUrl(String linkedInUrl) {
        this.linkedInUrl = linkedInUrl;
    }

    /**
     * Gets the URL to the candidate's portfolio or personal website.
     *
     * @return the portfolio URL
     */
    public String getPortfolioUrl() {
        return portfolioUrl;
    }

    /**
     * Sets the URL to the candidate's portfolio or personal website.
     *
     * @param portfolioUrl the portfolio URL to set
     */
    public void setPortfolioUrl(String portfolioUrl) {
        this.portfolioUrl = portfolioUrl;
    }

    /**
     * Gets the candidate's expected or desired salary.
     *
     * @return the expected salary
     */
    public Double getExpectedSalary() {
        return expectedSalary;
    }

    /**
     * Sets the candidate's expected or desired salary.
     *
     * @param expectedSalary the expected salary to set
     */
    public void setExpectedSalary(Double expectedSalary) {
        this.expectedSalary = expectedSalary;
    }

    /**
     * Gets whether the candidate is currently available for work.
     *
     * @return true if the candidate is available, false otherwise
     */
    public Boolean getIsAvailable() {
        return isAvailable;
    }

    /**
     * Sets whether the candidate is currently available for work.
     *
     * @param isAvailable true if the candidate is available, false otherwise
     */
    public void setIsAvailable(Boolean isAvailable) {
        this.isAvailable = isAvailable;
    }

    /**
     * Gets the timestamp when the candidate profile was created.
     *
     * @return the creation timestamp
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the creation timestamp for the candidate profile.
     *
     * @param createdAt the creation timestamp to set
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the timestamp when the candidate profile was last updated.
     *
     * @return the last update timestamp
     */
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the last update timestamp for the candidate profile.
     *
     * @param updatedAt the update timestamp to set
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}