package me.josephsf.jobportaljosephsfeir.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.index.Indexed;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Model class representing a user account in the Job Portal system.
 * <p>
 * The User entity stores essential authentication and identification information
 * for all users of the system, regardless of their role. Each user can have one
 * or more roles (Candidate, Recruiter, or Admin) which determine their access rights.
 * </p>
 *
 * <p>User accounts are stored in the "users" collection in MongoDB. The username
 * and email fields are indexed with unique constraints to ensure no duplicates.</p>
 *
 * <p>User documents contain:</p>
 * <ul>
 *   <li>Basic identification (username, email)</li>
 *   <li>Authentication credentials (password - stored encoded)</li>
 *   <li>Role assignments (roles)</li>
 *   <li>Audit timestamps (createdAt, updatedAt)</li>
 * </ul>
 *
 * <p>This class is used as the foundation for authentication and authorization
 * throughout the application. Users with Candidate or Recruiter roles will
 * typically have associated profile documents in the respective collections.</p>
 *
 * @author Joseph Sfeir
 * @version 1.0
 * @since 2025-05-15
 * @see Role
 * @see me.josephsf.jobportaljosephsfeir.model.Candidate
 * @see me.josephsf.jobportaljosephsfeir.model.Recruiter
 */
@Document(collection = "users")
public class User {
    /**
     * Unique identifier for the user.
     * Automatically generated by MongoDB.
     */
    @Id
    private String id;

    /**
     * User's login name.
     * Must be unique across the system.
     */
    @Indexed(unique = true)
    private String username;

    /**
     * User's email address.
     * Must be unique across the system.
     */
    @Indexed(unique = true)
    private String email;

    /**
     * User's password.
     * Stored in encrypted form.
     */
    private String password;

    /**
     * Set of roles assigned to the user.
     * Determines the user's permissions in the system.
     */
    private Set<Role> roles = new HashSet<>();

    /**
     * Timestamp when the user account was created.
     */
    private LocalDateTime createdAt;

    /**
     * Timestamp when the user account was last updated.
     */
    private LocalDateTime updatedAt;

    /**
     * Default constructor.
     * Initializes creation and update timestamps to current time.
     */
    public User() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    /**
     * Constructor with essential user details.
     * Initializes a new user with username, email, and password.
     *
     * @param username the user's login name
     * @param email the user's email address
     * @param password the user's password (should be encoded before passing)
     */
    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    /**
     * Gets the user's unique identifier.
     *
     * @return the user ID
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the user's unique identifier.
     *
     * @param id the user ID to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the user's username.
     *
     * @return the username
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the user's username.
     *
     * @param username the username to set
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Gets the user's email address.
     *
     * @return the email address
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the user's email address.
     *
     * @param email the email address to set
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the user's password (encoded).
     *
     * @return the encoded password
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the user's password.
     * Note: The password should be encoded before setting.
     *
     * @param password the encoded password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Gets the set of roles assigned to the user.
     *
     * @return the set of roles
     */
    public Set<Role> getRoles() {
        return roles;
    }

    /**
     * Sets the roles for the user.
     *
     * @param roles the set of roles to assign
     */
    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

    /**
     * Gets the timestamp when the user account was created.
     *
     * @return the creation timestamp
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the creation timestamp for the user account.
     *
     * @param createdAt the creation timestamp to set
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the timestamp when the user account was last updated.
     *
     * @return the last update timestamp
     */
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the last update timestamp for the user account.
     *
     * @param updatedAt the update timestamp to set
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}